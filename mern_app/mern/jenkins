pipeline{
    agent {
	    docker {
	        image 'kamalsai33/node-docker-ci:v1'
	        args '-v /var/run/docker.sock:/var/run/docker.sock' // for Docker CLI access
	   }
     }
    environment{
        SONAR_URL = "http://localhost:9000"
	FRONTEND = "mern_app/mern/frontend"
	BACKEND = "mern_app/mern/backend"
    }
    stages{
        stage('checkout') {
            steps{
                sh 'echo passed'
            }
        }

        stage('dependencies install') {
            steps{
                script{
                    def paths = [env.BACKEND, env.FRONTEND]
            	    paths.each { path ->
                	dir(path) {
                            sh '''
			     	ls -la && cat package.json
			     	echo "Installing dependencies in $PWD"
			     	npm ci --cache /tmp/.npm-cache --prefer-offline    #clean install dependencies 
			     	echo passed
			     '''
                        }
                    }
                }
            }
        }
        stage('linting') {
            steps{
                script{
                    dir(env.FRONTEND){
                        sh 'npm run lint'  
                        }
                    }   
	        }
        }
            
        stage('Build Frontend') {
            steps {
                dir(env.FRONTEND) {
                    sh 'npm run build'
                }
            }
        }
        stage('static code analysis') {
			steps {
                script{
                    def scanDirs = [env.BACKEND, env.FRONTEND]

            	     scanDirs.each { scanPath ->
                	dir(scanPath) {
                            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                                sh """
                                npx sonar-scanner \
                                -Dsonar.login=$SONAR_AUTH_TOKEN \
                                -Dsonar.host.url=${SONAR_URL}
                                """
                            }
                        }
                    }
                }
			
            }
	}
        stage('Package') {
            steps{
                script {
                    def scanDirs = [env.BACKEND, env.FRONTEND]

            	     scanDirs.each { scanPath ->
                	dir(scanPath) {
                            def image = docker.build("kamalsai33/${dir}-mern-app:${BUILD_NUMBER}")
                            
                            docker.withRegistry('https://index.docker.io/v1/', "docker-crd") {
				            image.push()
                            			} 
                        		}                        
                    		}     
                	}
            	}
            }
	}
	post {
   	   always {
        	cleanWs()  // This will remove the entire workspace at the end of the build
	 		
	    }
	}
    }
